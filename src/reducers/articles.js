const initArticles = [
  {
    'id': 0,
    'title': 'Java编程思想',
    'time': '2018-10-10',
    'tag': 'Java',
    'excerpt': '2018年马上就要结束了，让我们一起见证全世界Python的这一年。今年的榜单功能和去年相差不大，如果你看过去年榜单能够体会几个小改动，太忙了，也许明年能改版一下。榜单内容和去年有了一些区别：由...\n',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },
  {
    'id': 1,
    'title': 'Java编程思想',
    'time': '2018-10-10',
    'tag': 'Java',
    'excerpt': '2018年马上就要结束了，让我们一起见证全世界Python的这一年。今年的榜单功能和去年相差不大，如果你看过去年榜单能够体会几个小改动，太忙了，也许明年能改版一下。榜单内容和去年有了一些区别：由...\n',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },
  {
    'id': 2,
    'title': 'Thinking in Java',
    'time': '2018.10.10',
    'tag': 'Java',
    'excerpt': 'The book named Thinking in Java is popular in China.',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },
  {
    'id': 3,
    'title': 'Thinking in Python',
    'time': '2018.10.10',
    'tag': 'Python',
    'excerpt': 'The book named Thinking in Python is popular in China.',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },
  {
    'id': 4,
    'title': 'Thinking in Kotlin',
    'time': '2018.10.10',
    'tag': 'Kotlin',
    'excerpt': 'The book named Thinking in Kotlin is popular in China.',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },
  {
    'id': 5,
    'title': 'Thinking in C++',
    'time': '2018.10.10',
    'tag': 'C++',
    'excerpt': 'The book named Thinking in C++ is popular in China.',
    'content': '在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n' +
      '\n' +
      '闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。\n' +
      '\n' +
      '在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。\n' +
      '\n' +
      '闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。',
  },

];

const articles = (state = initArticles, action) => {
  switch (action.type) {
    case '':
      return [
        ...state,
        {},
      ];

    default:
      return state;
  }
};

export default articles;
